@model Financial.Core.ViewModels.AssetTransaction.CreateViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Asset</h2>


@using (Html.BeginForm("Create", "AssetTransaction", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Create Transaction</h4>
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.AssetId)

        <div class="form-group">
            @Html.LabelFor(model => model.AssetName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AssetName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.AssetName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AssetTypeName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AssetTypeName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.AssetTypeName, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />
        <h4>Transaction</h4>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.CheckNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CheckNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CheckNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SelectedTransactionTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedTransactionTypeId, Model.TransactionTypes, "-- Select a Type --", new { @id = "type", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SelectedTransactionTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SelectedTransactionCategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedTransactionCategoryId, Model.TransactionCategories, "-- Select a Category --", new { id="category_list", @class = "form-control" })
                <input type="button" id="add_category" value="Add" />
                <div id="selected_categories">
                    @Html.HiddenFor(model => model.TransactionCategoriesSelected, new { id = "category_list_selected" })
                </div>
                @Html.ValidationMessageFor(model => model.SelectedTransactionCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SelectedTransactionDescriptionId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedTransactionDescriptionId, Model.TransactionDescriptions, "-- Select a Description --", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SelectedTransactionDescriptionId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id="date_group" class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { id = "datepicker", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
                @Html.ActionLink("Cancel", "Details", "Asset", new { id = Model.AssetId }, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jquerydt")

    <script>
        $(function () {
            $("#datepicker").datepicker();
        });

        $("#datepicker").focus(function () {
            document.getElementById("date_group").style.paddingBottom = "180px";
        });

        $("#datepicker").focusout(function () {
            document.getElementById("date_group").style.paddingBottom = "0px";
        });

        $(function () {
            $('#datetimepicker').datetimepicker();
        });

        $('#datetimepicker').datetimepicker({
            timeFormat: 'hh:mm TT',
            interval: 60,
            dynamic: true,
            dropdown: true,
            scrollbar: true
        });

        // return list of multiple selected values from dropdownlist
        var categoryList = document.getElementById("category_list");
        var arrayCategories = [];
        var selectedCategoriess = document.getElementById("selected_categories");
        var addCategory = document.getElementById("add_category");
        addCategory.addEventListener("click", function (event) {
            // display selected values in view
            var index = arrayCategories.length;
            arrayCategories[index] = categoryList.value;
            selectedCategoriess.innerHTML += categoryList.options[categoryList.selectedIndex].innerHTML;
            selectedCategoriess.innerHTML += "<br />";

            // store selected values in model
            $("#category_list_selected").val(arrayCategories);
        });
    </script>
}
