@model IEnumerable<Financial.Core.ViewModels.AssetTransaction.IndexViewModel>

@{
    ViewBag.Title = "Index";
    var decTotal = 0.00m;
}

<h2>Transactions</h2>
@*
<img src="@Html.Partial("_Chart")" />
    *@
<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table id="table_trasactions" class="table">
    <tr>
        <th onclick="sortTable(0)">
            @Html.DisplayNameFor(model => model.DueDate)
        </th>
        <th onclick="sortTable(1)">
            @Html.DisplayNameFor(model => model.ClearDate)
        </th>
        <th onclick="sortTable(2)">
            @Html.DisplayNameFor(model => model.AssetName)
        </th>
        <th onclick="sortTable(3)" style="text-align: right;">
            @Html.DisplayNameFor(model => model.Income)
        </th>
        <th onclick="sortTable(4)" style="text-align: right;">
            @Html.DisplayNameFor(model => model.Expense)
        </th>
        <th onclick="sortTable(5)" style="text-align: right;">
            @Html.DisplayNameFor(model => model.Total)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.DueDate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ClearDate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.AssetName)
        </td>
        <td style="text-align: right;">
            @if (item.TransactionType == "Income")
            {
                @Html.DisplayFor(modelItem => item.Amount)
            }
        </td>
        <td style="text-align: right;">
            @if (item.TransactionType == "Expense")
            {
                @Html.DisplayFor(modelItem => item.Amount)
            }
        </td>
        <td style="text-align: right;">
            @Html.DisplayFor(modelItem => item.Total)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", "AssetTransaction", new { id = item.Id }, null) |
            @Html.ActionLink("Details", "Details", "Asset", new { id = item.AssetId }, null) |
            @Html.ActionLink("Delete", "Delete", "AssetTransaction", new { id = item.Id }, null)
        </td>
    </tr>
}

</table>

<script>
    $(function () {
        var table = document.getElementById("table_trasactions");
        var rows = table.getElementsByTagName("TR");
        /* Loop through all table rows (except the first, which contains table headers): */
        for (i = 1; i < (rows.length - 1) ; i++) {
            /* Get the two elements you want to compare, one from current row and one from the next: */
            x = rows[i].getElementsByTagName("TD")[n];
            y = rows[i + 1].getElementsByTagName("TD")[n];

            /* Check if the two rows should switch place, based on the direction, asc or desc: */
            if (dir == "asc") {
                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    // If so, mark as a switch and break the loop:
                    shouldSwitch = true;
                    break;
                }
            } else if (dir == "desc") {
                if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                    // If so, mark as a switch and break the loop:
                    shouldSwitch = true;
                    break;
                }
            }
        }
    });

    function sortTable(n) {
        var i, x, y, switchcount = 0;
        var table = document.getElementById("table_trasactions");
        var switching = true;
        // Set the sorting direction to ascending:
        var dir = "asc";
        /* Make a loop that will continue until
        no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            // Start by saying there should be no switching:
            var shouldSwitch = false;
            var rows = table.getElementsByTagName("TR");
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 1; i < (rows.length - 1) ; i++) {
                // Start by saying there should be no switching:
                //shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /* Check if the two rows should switch place,
                based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>
