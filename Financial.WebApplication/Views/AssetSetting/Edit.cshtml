@model Financial.WebApplication.Models.ViewModels.AssetSetting.EditLinkedSettingTypesViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Asset</h2>


@using (Html.BeginForm("Edit", "AssetSetting", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Edit Settings</h4>
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.AssetId)

        <div class="form-group">
            @Html.LabelFor(model => model.AssetName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AssetName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.AssetName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AssetTypeName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AssetTypeName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.AssetTypeName, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />
        <h4>Settings</h4>
        <hr />

        @for (int i = 0; i < Model.EditViewModels.Count(); i++)
        {
            var item = Model.EditViewModels[i];
            @Html.HiddenFor(x => Model.EditViewModels[i].Id)
            @Html.HiddenFor(x => Model.EditViewModels[i].AssetId)
            @Html.HiddenFor(x => Model.EditViewModels[i].SettingTypeId)

            <div class="form-group">
                @Html.Label(item.SettingTypeName, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(x => Model.EditViewModels[i].Value, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(x => item.Value, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
                @Html.ActionLink("Cancel", "Details", "Asset", new { id = Model.AssetId }, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
