@model Financial.Core.ViewModels.AssetTypeRelationshipType.CreateViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Linked Asset Types</h2>


@using (Html.BeginForm("Create", "AssetTypeRelationshipType", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Create</h4>
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.SuppliedAssetTypeId, new { id = "supplied_asset_type_id" })

        <div class="form-group">
            @Html.LabelFor(model => model.SuppliedAssetTypeName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SuppliedAssetTypeName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.SuppliedAssetTypeName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SelectedRelationshipLevel, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(x => x.SelectedRelationshipLevel, Model.RelationshipLevels, "-- Select a Relationship Level --", new { @id = "selected_relationship_level", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SelectedRelationshipLevel, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id="relationship_types" style="display:none">
            @Html.HiddenFor(model => model.SelectedParentChildRelationshipType, new { id = "selected_parent_child_relationship_type" })
        </div>

        <div id="link_asset_types" style="display:none">
            @Html.HiddenFor(model => model.SelectedLinkAssetType, new { id = "selected_link_asset_type" })
            @{
                Html.RenderAction("DisplayLinkAssetTypes", "AssetTypeRelationshipType", new { suppliedAssetTypeId = Model.SuppliedAssetTypeId, selectedRelationshipLevelId = Model.SelectedRelationshipLevel });
            }
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
                @Html.ActionLink("Cancel", "Details", "AssetType", new { id = Model.SuppliedAssetTypeId }, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
                }

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        @* DIV *@
        var $relationship_types = $("#relationship_types");
        var $link_asset_types = $("#link_asset_types");

        @* VALUES *@
        var $supplied_asset_type_id = $("#supplied_asset_type_id");
        var $selected_relationship_level = $("#selected_relationship_level");
        var $selected_parent_child_relationship_type = $("#selected_parent_child_relationship_type");

        $(document).ready(function () {


        });

        $selected_relationship_level.change(function () {
            if ($selected_relationship_level.val() == 'Parent' || $selected_relationship_level.val() == 'Child') {
                @* Show Relationship Types drop down list *@
                $link_asset_types.hide('fast');
                updateRelationshipTypes($supplied_asset_type_id.val(), $selected_relationship_level.val());
                $relationship_types.show('fast');
            }
            else {
                @* Hide other drop down lists *@
                $link_asset_types.hide('fast');
                $relationship_types.hide('fast');
            }
        });

        function updateRelationshipTypes(suppliedAssetTypeId, selectedLevel) {
            $.ajax({
                url: '/AssetTypeRelationshipType/DisplayParentChildRelationshipTypes',
                type: 'GET',
                cache: false,
                data: { suppliedAssetTypeId: suppliedAssetTypeId, selectedRelationshipLevelId: selectedLevel },
                success: function (data) {
                    $relationship_types.html(data);
                },
                error: function (e) {
                }
            });
        }

        $relationship_types.change(function () {

            console.log("Supplied: " + $supplied_asset_type_id.val());
            console.log("Level: " + $selected_relationship_level.val());
            console.log("Type: " + $selected_parent_child_relationship_type.val());

            if ($selected_relationship_level.val() != null || $selected_relationship_level.val() == "") {
                @* Show Link Asset Types drop down list *@
                updateLinkAssetTypes($supplied_asset_type_id.val(), $selected_relationship_level.val());
                $link_asset_types.show('fast');
            }
            else {
                @* Hide drop down list *@
                $link_asset_types.hide('fast');
            }
        });

        function updateLinkAssetTypes(suppliedAssetTypeId, selectedLevel) {
            $.ajax({
                url: '/AssetTypeRelationshipType/DisplayLinkAssetTypes',
                type: 'GET',
                cache: false,
                data: { suppliedAssetTypeId: suppliedAssetTypeId, selectedRelationshipLevelId: selectedLevel },
                success: function (data) {
                    $link_asset_types.html(data);
                },
                error: function (e) {
                }
            });
        }

    </script>
}
